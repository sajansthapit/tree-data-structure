package io.sajansthapit.readingfolders;import java.io.File;import java.util.ArrayList;import java.util.List;public class FileTreeGenerator {    FileDto parent;    private String rootFolderPath;    public FileTreeGenerator(String rootFolderPath) {        this.rootFolderPath = rootFolderPath;        File folder = new File(rootFolderPath);        this.parent = new FileDto();        this.parent.path = folder.getPath();        this.parent.name = folder.getName();        this.parent.isDirectory = true;        insert(parent);        System.out.println("hello");    }    void insert(FileDto fileDto) {        FileDto foundPath;        if (!fileDto.path.equals(parent.path)) {            foundPath = getDirectoryPath(new File(fileDto.path), parent, new ArrayList<File>());        }else foundPath = fileDto;        File folder = new File(foundPath.path);        File[] listOfFiles = folder.listFiles();        if (foundPath.children == null)            foundPath.children = new ArrayList<>();        for (File file : listOfFiles) {            if (file.isFile()) {                foundPath.children.add(toDto(file));            } else {                foundPath.children.add(toDto(file));                insert(toDto(file));//                    FileDto child = getDirectoryPath(new File(fileDto.path), parent);//                    insert(child);            }        }    }    FileDto getDirectoryPath(File file, FileDto upper, List<File> visited) {        if(upper.children != null){            for(FileDto fileDto : upper.children){                if(fileDto.isDirectory && file.getPath().equals(fileDto.path))                    return fileDto;            }            for(FileDto fileDto: upper.children){                if(fileDto.isDirectory && !visited.contains(new File(fileDto.path))){                    return getDirectoryPath(file, fileDto, visited);                }            }            if(!visited.contains(new File(upper.path)))                visited.add(new File(upper.path));            return getDirectoryPath(file, parent, visited);        }        return null;//        FileDto found = null;//        for (FileDto child : upper.children) {//            if (child.isDirectory && child.path.equals(file.getPath())) {//                return child;//            } else if (child.isDirectory) {//                return getDirectoryPath(file, child, upper);//            }//        }//        return getDirectoryPath(file, visited, null);    }    FileDto toDto(File file) {        FileDto fileDto = new FileDto();        fileDto.isDirectory = file.isDirectory();        fileDto.name = file.getName();        fileDto.path = file.getPath();        return fileDto;    }}